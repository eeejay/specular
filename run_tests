#!/usr/bin/env python
#
# Speclenium Test harness
#
# The contents of this file are subject to the Mozilla Public License Version
# 1.1 (the "License"); you may not use this file except in compliance with
# the License. You may obtain a copy of the License at
# http://www.mozilla.org/MPL/
#
# Software distributed under the License is distributed on an "AS IS" basis,
# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
# for the specific language governing rights and limitations under the
# License.
#
#
# The Initial Developer of the Original Code is Eitan Isaacson.
# Portions created by the Initial Developer are Copyright (C) 2008
# the Initial Developer. All Rights Reserved.
#
# Contributor(s):
#   Original Author: Eitan Isaacson (eitan@ascender.com)
#
# Alternatively, the contents of this file may be used under the terms of
# either of the GNU General Public License Version 2 or later (the "GPL"),
# or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
# in which case the provisions of the GPL or the LGPL are applicable instead
# of those above. If you wish to allow use of your version of this file only
# under the terms of either the GPL or the LGPL, and not to allow others to
# use your version of this file under the terms of the MPL, indicate your
# decision by deleting the provisions above and replace them with the notice
# and other provisions required by the GPL or the LGPL. If you do not delete
# the provisions above, a recipient may use your version of this file under
# the terms of any one of the MPL, the GPL or the LGPL.

import os, os.path, sys
import unittest

test_dir = os.path.join(os.path.dirname(__file__), 'tests')

sys.path.insert(0, test_dir)

import settings

def _get_available_tests():
    test_files = os.listdir(test_dir)
    test_files = \
        filter(lambda x: x.endswith('_test.py'), test_files)
    return [t[:-8] for t in test_files]
    

def list_tests():
    print 'Available tests:'
    tests = _get_available_tests()
    for t in tests:
        m = __import__(t+'_test')
        try:
            short_desc = m.__doc__.split('\n')[0]
        except:
            short_desc = ''
        print ' %s%s%s' % (t, ' '*(25-len(t)), short_desc)

def main(tests=[], browsers=None, platforms=None):
    if not tests:
        tests = _get_available_tests()
    suite = unittest.TestSuite()
    for test_module in tests:
        m = __import__(test_module+'_test')
        for cls_name in filter(lambda x: x.endswith('Test'), dir(m)):
            print 'Adding %s to suite', cls_name
            suite.addTest(getattr(m, cls_name)())

    for name, platform in settings.configs.items():
        if platforms is not None and name not in platforms.split(','):
            continue
        settings.current_host = platform['host']
        for browser, command in platform['browsers'].items():
            if browsers is not None and browser not in browsers.split(','):
                continue
            settings.current_command = command
#            print 'Running tests for', name, browser
            unittest.TextTestRunner().run(suite)


if __name__ == '__main__':
    from optparse import OptionParser

    usage = "Usage: %prog [options] tests"
    parser = OptionParser(usage)
    parser.add_option("--list-tests", dest="list_tests",
                      action="store_true", help="list available tests")
    parser.add_option("--list-browsers", dest="list_browsers",
                      action="store_true", help="list available browsers")
    parser.add_option("--list-platforms", dest="list_platforms",
                      action="store_true", help="list available browsers")
    parser.add_option("-b", "--browsers", dest="browsers",
                      help="comma seperated list of browsers")
    parser.add_option("-p", "--platforms", dest="platforms",
                      help="comma seperated list of platforms")

    (options, args) = parser.parse_args()
    if options.list_tests:
        list_tests()
    elif options.list_browsers:
        print 'Available browsers:'
        for name, platform in settings.configs.items():
            print ' %s:' % name.capitalize()
            for browser in platform['browsers'].keys():
                print '  %s' % browser
    elif options.list_platforms:
        print 'Available platforms:'
        for name in settings.configs.keys():
            print ' %s' % name
    else:
        main(args, options.browsers, options.platforms)
